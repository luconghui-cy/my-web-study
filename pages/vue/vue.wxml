<view class="container">
  <view class="v-section">
    <view class="v-title">
      <text>示例</text>
    </view>
    <view class="v-content">
      <!--  example start -->
      <view>
        <text class="v-subtitle">Vue简介</text>
        <text>Vue.js 是目前最火的一个前端框架，React是最流行的一个前端框架（React除了开发网站，还可以开发手机App， Vue语法也是可以用于进行手机App开发的，需要借助于Weex）</text>
        <text>Vue.js 是前端的**主流框架之一**，和Angular.js、React.js 一起，并成为前端三大主流框架！</text>
        <text>Vue.js 是一套构建用户界面的框架，**只关注视图层**，它不仅易于上手，还便于与第三方库或既有项目整合。（Vue有配套的第三方类库，可以整合起来做大型项目的开发）</text>
        <text>提高开发效率的发展历程：原生JS -> Jquery之类的类库 -> 前端模板引擎 -> Angular.js / Vue.js（能够帮助我们减少不必要的DOM操作；提高渲染效率；双向数据绑定的概念【通过框架提供的指令，我们前端程序员只需要关心数据的业务逻辑，不再关心DOM是如何渲染的了】）</text>
        <text>在Vue中，一个核心的概念，就是让用户不再操作DOM元素，解放了用户的双手，让程序员可以更多的时间去关注业务逻辑</text>
      </view>

      <!--  框架和库的区别 -->
      <view>
        <text class="v-subtitle">框架和库的区别</text>
        <text>框架：是一套完整的解决方案；对项目的侵入性较大，项目如果需要更换框架，则需要重新架构整个项目。
              - node 中的 express；</text>
        <text>库（插件）：提供某一个小功能，对项目的侵入性较小，如果某个库无法完成某些需求，可以很容易切换到其它库实现需求。
              - 1. 从Jquery 切换到 Zepto
              - 2. 从 EJS 切换到 art-template</text>
      </view>


      <!--  Vue 基础 -->
      <view>
        <text class="v-subtitle">vue 数据基础</text>
        <text>一个 Vue 应用由一个通过 new Vue 创建的根 Vue 实例，以及可选的嵌套的、可复用的组件树组成。所有的 Vue 组件都是 Vue 实例，并且接受相同的选项对象 (一些根实例特有的选项除外)</text>
        <text>当一个 Vue 实例被创建时，它将 data 对象中的所有的 property 加入到 Vue 的[响应式系统]中。当这些 property 的值发生改变时，视图将会产生“响应”，即匹配更新为新的值。</text>
        <text>当一个对象加入到vue实例中，设置属性的值会影响原始对象，反之亦然</text> 
        <text>值得注意的是只有当实例被创建时就已经存在于 data 中的 property 才是响应式的。也就是说如果你添加一个新的 property，比如：
            vm.b = 'hi'
            那么对 b 的改动将不会触发任何视图的更新。</text>
        <text>使用 Object.freeze()，这会阻止修改现有的 property，也意味着响应系统无法再追踪变化。
          var obj = {
              foo: 'bar'
            }

            Object.freeze(obj)

            new Vue({
              el: '#app',
              data: obj
            })
        </text>
        <text>除了数据 property，Vue 实例还暴露了一些有用的实例 property 与方法。它们都有前缀 $，以便与用户定义的 property 区分开来
          var data = { a: 1 }
          var vm = new Vue({
            el: '#example',
            data: data
          })

          vm.$data === data // => true
          vm.$el === document.getElementById('example') // => true

          // $watch 是一个实例方法
          vm.$watch('a', function (newValue, oldValue) {
            // 这个回调将在 `vm.a` 改变后调用
          })
        </text>
        <text>当我们导入包vue.js后，我们的浏览器就多了一个Vue 构造函数</text>
        <text>
          var vm = new Vue({
            el : '',  //控制页面的哪个区域
            data: {}, //存放的 el 中用到的数据
            methods:{},
            filters:{}
          });
        </text>
        <text>M : data , V : vue控制的区域 , VM : new Vue() 的实例</text>
        <text>通过使用 v-once 指令，你也能执行一次性地插值，当数据改变时，插值处的内容不会更新。但请留心这会影响到该节点上的其它数据绑定：
          [span v-once>这个将不会改变: {{ msg }}] [/span]
        </text>  
        <text>使用 v-cloak 能够解决 插值表达式{{  }} 的闪烁问题。即设置style [v-cloak]的display : none</text>
        <text>v-text 和 v-cloak区别 : 
        [1] 默认的 v-text 是没有闪烁问题的 ； 
        [2] v-text 会覆盖原本的内容 </text>
        <text>v-html : 会覆盖原本内容，并以html解析数据</text>
        <text>v-bind:（绑定属性） 是vue提供的用于绑定属性的一个指令。v-bind:title = "title + 'world' " ， 会解析双引号里的表达式！！！即以title变量的值和字符串world连接后结果显示</text>
        <text>[v-bind:] 可以被简写为冒号 [:] ,即 :title = "mytitle"</text>
        <text>v-on: （绑定事件） v-on:click = "show" , 其中show方法会在methods定义。缩写 @</text>
        <text>methods:{
          //旧的写法
          show : function(msg){
            console.log(msg);
          }
          //使用es6新的写法
          show(msg){
            console.log(msg);
          }
        }</text>
        <text>注意：在VM实例中，如果要获取data上的数据，或者调用methods的方法，必须通过this.数据属性 或 this.方法，这里的this就是 vm实例对象。</text>
        <text>vm实例 会监听自己身上的 data 的改变，只要一发生变化，立即同步到页面。程序员只需要关心数据。</text>
      </view>

      <view>
        <text class="v-subtitle">使用v-html注意</text>
        <text>你的站点上动态渲染的任意 HTML 可能会非常危险，因为它很容易导致 XSS 攻击。请只对可信内容使用 HTML 插值，绝不要对用户提供的内容使用插值。</text>
        <text>Mustache 语法不能作用在 HTML attribute 上，遇到这种情况应该使用 v-bind 指令：</text>
        <text>对于所有的数据绑定，Vue.js 都提供了完全的 JavaScript 表达式支持。
          这些表达式会在所属 Vue 实例的数据作用域下作为 JavaScript 被解析。有个限制就是，每个绑定都只能包含单个表达式</text>

          <text>指令：v- 开头，指令的值大多数是单值， v-for 除外。
                
                参数：在指令名称之后以冒号表示。例如，v-bind:href , 在这里 href 是参数 , 还有 v-on:
                
                动态参数：从 2.6.0 开始，可以用方括号括起来的 JavaScript 表达式作为一个指令的参数：
                [a v-bind:[attributeName]="url"> ... [/a]
                这里的 attributeName 会被作为一个 JavaScript 表达式进行动态求值，求得的值将会作为最终的参数来使用。例如，如果你的 Vue 实例有一个 data property attributeName，其值为 "href"，那么这个绑定将等价于 v-bind:href。

                同样地，你可以使用动态参数为一个动态的事件名绑定处理函数：
                [a v-on:[eventName]="doSomething"> ... ]/a]
                在这个示例中，当 eventName 的值为 "focus" 时，v-on:[eventName] 将等价于 v-on:focus。
          </text>

          <text>我们可以将同一函数定义为一个方法而不是一个计算属性。两种方式的最终结果确实是完全相同的。然而，不同的是计算属性是基于它们的响应式依赖进行缓存的。只在相关响应式依赖发生改变时它们才会重新求值。这就意味着只要 message 还没有发生改变，多次访问 reversedMessage 计算属性会立即返回之前的计算结果，而不必再次执行函数。</text>

          <text>我们为什么需要缓存？假设我们有一个性能开销比较大的计算属性 A，它需要遍历一个巨大的数组并做大量的计算。然后我们可能有其他的计算属性依赖于 A。如果没有缓存，我们将不可避免的多次执行 A 的 getter！如果你不希望有缓存，请用方法来替代。</text>

          <text>Vue 提供了一种更通用的方式来观察和响应 Vue 实例上的数据变动：侦听属性。当你有一些数据需要随着其它数据变动而变动时，你很容易滥用 watch——特别是如果你之前使用过 AngularJS。然而，通常更好的做法是使用计算属性而不是命令式的 watch 回调</text>

          <text>计算属性默认只有 getter，不过在需要时你也可以提供一个 setter：
            // ...
            computed: {
              fullName: {
                // getter
                get: function () {
                  return this.firstName + ' ' + this.lastName
                },
                // setter
                set: function (newValue) {
                  var names = newValue.split(' ')
                  this.firstName = names[0]
                  this.lastName = names[names.length - 1]
                }
              }
            }
            现在再运行 vm.fullName = 'John Doe' 时，setter 会被调用，vm.firstName 和 vm.lastName 也会相应地被更新。
            </text>
      </view>

      <!--  跑马灯 -->
      <view>
        <text class="v-subtitle">跑马灯</text>
        <text>es6新增的箭头函数：内部的 this 和 函数外面的 this一致！！！</text>
        <text>
          methods:{
            lang( ){
              setInterval(( )=>{
                var start = this.msg.substring(0, 1);
                var end = this.msg.substring(1);
                this.msg = end + start;
              },500);
            }
          }
        </text>
        
      </view>

      <!--  表单数据绑定 -->
      <view>
        <text class="v-subtitle">表单数据绑定</text>
        <text>你可以用 v-model 指令在表单 input、textarea 及 select 元素上创建双向数据绑定。</text>
        <text>v-model 在内部为不同的输入元素使用不同的 property 并抛出不同的事件：
              text 和 textarea 元素使用 value property 和 input 事件；
              checkbox 和 radio 使用 checked property 和 change 事件；
              select 字段将 value 作为 prop 并将 change 作为事件。</text>
      </view>

      <!--  v-if v-else v-else-if  v-show-->
      <view>
        <text class="v-subtitle">v-if , v-else , v-else-if , v-show</text>
        <text>content</text>
      </view>

      <!--  v-for -->
      <view>
        <text class="v-subtitle">v-for</text>
        <text>v-for 指令需要使用 item in items 形式的特殊语法，其中 items 是源数据数组，而 item 则是被迭代的数组元素的别名。</text>
        <text>在 v-for 块中，我们可以访问所有父作用域的 property。v-for 还支持一个可选的第二个参数，即当前项的索引。</text>
        <text>也可以用 of 替代 in 作为分隔符，因为它更接近 JavaScript 迭代器的语法：v-for="item of items"</text>
        <text>你也可以用 v-for 来遍历一个对象的 property。
          v-for="(value, name, index) in object"
          第二个参数：键名
          第三个参数：索引
        </text>
        <text>为了给 Vue 一个提示，以便它能跟踪每个节点的身份，从而重用和重新排序现有元素，你需要为每项提供一个唯一 key attribute：
          v-for="item in items" v-bind:key="item.id"
        </text>
        <text>Vue 将被侦听的数组的变更方法进行了包裹，所以它们也将会触发视图更新。这些被包裹过的方法包括：
          push()
          pop()
          shift()
          unshift()
          splice()
          sort()
          reverse()</text>
          <text>变更方法，顾名思义，会变更调用了这些方法的原始数组。相比之下，也有非变更方法，例如 filter()、concat() 和 slice()。它们不会变更原始数组，而总是返回一个新数组。当使用非变更方法时，可以用新数组替换旧数组：</text>
      </view>

      <!--  计算属性关键词: computed。 -->
      <view>
        <text class="v-subtitle">计算属性关键词: computed</text>
        <text>我们可以使用 methods 来替代 computed，效果上两个都是一样的，但是 computed 是基于它的依赖缓存，只有相关依赖发生改变时才会重新取值。而使用 methods ，在重新渲染的时候，函数总会重新调用执行。</text>
        <text>可以说使用 computed 性能会更好，但是如果你不希望缓存，你可以使用 methods 属性。</text>
        <text>computed 属性默认只有 getter ，不过在需要时你也可以提供一个 setter ：</text>
      </view>
      <!--  end -->


      <!--  Vue.js 监听属性 -->
      <view>
        <text class="v-subtitle">Vue.js 监听属性</text>
        <text>我们可以通过 watch 来响应数据的变化</text>
        <text>
          data :{
            kilometers : 0,
            meters : 0
          },
          watch : {
               kilometers:function(val) {
                  this.kilometers = val;
                  this.meters = this.kilometers * 1000
               },
               meters : function (val) {
                  this.kilometers = val/ 1000;
                  this.meters = val;
               }
            }
        </text>
        <text>vm.$watch('counter', function(nval, oval) {
            alert('计数器值的变化 :' + oval + ' 变为 ' + nval + '!');
        });</text>
      </view>


      <!--  Vue.js 样式绑定 -->
      <view>
        <text class="v-subtitle">Vue.js 样式绑定</text>
        <text>v-bind:class="{ active: isActive }" , 如果isActive为true，样式为active</text>
        <text>v-bind:class="{ active: isActive, 'text-danger': hasError }" ， 可以这样设置多个类</text>
        <text>>v-bind:class="isActive ? 'active' : 'text-danger' " 也可以适用条件运算符</text>
        <text>当样式有连接符 - 需要加引号 ''</text>
        <text>也可以直接绑定数据里的一个对象： 
          v-bind:class="classObject"，classObject是computed的一个属性。
          computed: {
            classObject: function () {
              return {
                base: true,
                active: this.isActive && !this.error.value,
                'text-danger': this.error.value && this.error.type === 'fatal',
              }
            }
        </text>
        <text>我们可以把一个数组传给 v-bind:class 
          //html代码
          v-bind:class="[activeClass, errorClass]" 
          
          //js代码
          data: {
            activeClass: 'active',
            errorClass: 'text-danger'
          }

          //div class 为： active text-danger
        </text>

        <text>
          我们还可以使用三元表达式来切换列表中的 class ：
          v-bind:class="[errorClass ,isActive ? activeClass : '']"
          //errorClass 是始终存在的，isActive 为 true 时添加 activeClass 类

          //js代码
          data: {
            isActive : true,
            activeClass: 'active',
            errorClass: 'text-danger'
          }
        </text>

        <text>
          内联样式：
          1. v-bind:style="{ color: activeColor, fontSize: fontSize + 'px' }"

          2. v-bind:style="styleObject"
          //js
          data :{
              styleObject: {
                color: 'green',
                fontSize: '30px'
              }
          }

          //多个样式
          3. v-bind:style="[baseStyles, overridingStyles]"
          //js
          data : {
            baseStyles : {样式键值对...},
            overridingStyles : {样式键值对....}
          }

        </text>
      </view>
      <!-- end -->


      <!--  Vue.js 事件处理器 -->
      <view>
        <text class="v-subtitle">Vue.js 事件处理器</text>
        <text>v-on:click="greet" `greet` 是在下面定义的方法名</text>
        <text>v-on:click="say('hi')" 传递参数 'hi'</text>
        <text>事件修饰符</text>
        <text>按键修饰符</text>
      </view>
      <!-- end -->

      <!--  Vue.js 表单 -->
      <view>
        <text class="v-subtitle">Vue.js 表单</text>
        <text>可以用 v-model 指令在表单控件元素上创建双向数据绑定。</text>
        <text>复选框如果是一个为逻辑值，如果是多个则绑定到同一个数组：</text>
        <image src="./image/img2.png"></image>
        <text>修饰符：
              v-model.lazy
              .lazy 在默认情况下， v-model 在 input 事件中同步输入框的值与数据，但你可以添加一个修饰符 lazy ，从而转变为在 change 事件中同步：
              
              v-model.number
              .number 如果想自动将用户的输入值转为 Number 类型（如果原值的转换结果为 NaN 则返回原值），可以添加一个修饰符 number 给 v-model 来处理输入值：

              v-model.trim
              .trim 如果要自动过滤用户输入的首尾空格，可以添加 trim 修饰符到 v-model 上过滤输入：
        </text>
      </view>

      <!--  Vue.js 组件 --> 
      <view>
        <text class="v-subtitle">Vue.js 组件</text>
        <text>因为组件是可复用的 Vue 实例，所以它们与 new Vue 接收相同的选项，例如 data、computed、watch、methods 以及生命周期钩子等。仅有的例外是像 el 这样根实例特有的选项。</text>
        <text>每个组件都会各自独立维护它的 数据。因为你每用一次组件，就会有一个它的新实例被创建。</text>
        <text>组件中的 data 必须是一个函数 ， 每个实例可以维护一份被返回对象的独立的拷贝：
          data: function () {
            return {
              count: 0
            }
          }
        </text>

        <text>组件必须先注册以便 Vue 能够识别。这里有两种组件的注册类型：全局注册和局部注册。</text>

        <text>全局注册的。也就是说它们在注册之后可以用在任何新创建的 Vue 根实例 (new Vue) 的模板中 , 在所有子组件中也是如此，也就是说这三个组件在各自内部也都可以相互使用</text>

        <text>全局注册往往是不够理想的。比如，如果你使用一个像 webpack 这样的构建系统，全局注册所有的组件意味着即便你已经不再使用一个组件了，它仍然会被包含在你最终的构建结果中。这造成了用户下载的 JavaScript 的无谓的增加。</text>

        <text>局部注册
          var ComponentA = { /* ... */ }
          var ComponentB = { /* ... */ }
          var ComponentC = { /* ... */ }
          然后在 components 选项中定义你想要使用的组件：

          new Vue({
            el: '#app',
            components: {
              'component-a': ComponentA,
              'component-b': ComponentB
            }
          })</text>

      </view>

      <!--  侦听器 -->
      <view>
        <text class="v-subtitle">侦听器</text>
        <text>虽然计算属性在大多数情况下更合适，但有时也需要一个自定义的侦听器。这就是为什么 Vue 通过 watch 选项提供了一个更通用的方法，来响应数据的变化。当需要在数据变化时执行异步或开销较大的操作时，这个方式是最有用的。</text>
      </view>
      <!-- end -->


      <!--  Vue.js 自定义指令 -->
      <view>
        <text class="v-subtitle">Vue.js 自定义指令</text>
        <text>content</text>
      </view>

      <!--  Vue.js 路由 -->
      <view>
        <text class="v-subtitle">Vue.js 路由</text>
        <text>content</text>
      </view>

      <!--  Vue.js 过渡和动画 -->
      <view>
        <text class="v-subtitle">Vue.js 过渡和动画</text>
        <text>content</text>
      </view>

      <!--  Vue.js 混入 -->
      <view>
        <text class="v-subtitle">Vue.js 混入</text>
        <text>content</text>
      </view>

      <!--  Vue.js Vue.js Ajax(axios) -->
      <view>
        <text class="v-subtitle">Vue.js Vue.js Ajax(axios)</text>
        <text>content</text>
      </view>

      <!--  Vue.js Vue.js Ajax(vue-resource) -->
      <view>
        <text class="v-subtitle">Vue.js Vue.js Ajax(vue-resource)</text>
        <text>content</text>
      </view>

      <!--  Vue.js 响应接口 -->
      <view>
        <text class="v-subtitle">Vue.js 响应接口</text>
        <text>content</text>
      </view>

       <!--  start -->
      <view>
        <text class="v-subtitle">使用 key 管理复用的元素</text>
        <text>Vue 会尽可能高效地渲染元素，通常会复用已有元素而不是从头开始渲染。这么做除了使 Vue 变得非常快之外，</text>
        <text>Vue 为你提供了一种方式来表达“这两个元素是完全独立的，不要复用它们”。只需添加一个具有唯一值的 key attribute 即可：</text>
      </view>
      <!-- end -->

       <!--  v-if  v-show -->
      <view>
        <text class="v-subtitle">v-if , v-show</text>
        <text>v-if 是“真正”的条件渲染，因为它会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建。
              v-if 也是惰性的：如果在初始渲染时条件为假，则什么也不做——直到条件第一次变为真时，才会开始渲染条件块。
              相比之下，v-show 就简单得多——不管初始条件是什么，元素总是会被渲染，并且只是简单地基于 CSS 进行切换。
              一般来说，v-if 有更高的切换开销，而 v-show 有更高的初始渲染开销。因此，如果需要非常频繁地切换，则使用 v-show 较好；如果在运行时条件很少改变，则使用 v-if 较好。</text>
        <text>不推荐同时使用 v-if 和 v-for , 当 v-if 与 v-for 一起使用时，v-for 具有比 v-if 更高的优先级。</text>
      </view>

      <!--  start -->
      <view>
        <text class="v-subtitle">title</text>
        <text>content</text>
      </view>
      <!-- end -->
    </view>
  </view>
</view>