<view class="container">
  <view class="v-section">
    <view class="v-title">
      <text>javascript</text>
    </view>
    <view class="v-content">
       <!--  start -->
      <view>
        <text class="v-subtitle">数组的常用方法(
          连接concat,生成副本
          字符串join,

          删除shift pop,改变原数组
          添加unshift push,改变原数组
          splice删除指定元素并添加新元素 改变原数组
          倒序reverse,改变原数组
          排序sort 改变原数组

          返回子数组 slice 生成副本)</text>

        <text>concat() 方法用于连接两个或多个数组。该方法不会改变现有的数组，而仅仅会返回被连接数组的一个副本。 
              arrayObject.concat(arrayX,arrayX,......,arrayX)
        </text>
        <text>join() 方法用于把数组中的所有元素放入一个字符串。元素是通过指定的分隔符进行分隔的。
          arrayObject.join(separator)
        </text>
      </view>
      <text>pop() 方法用于删除并返回数组的最后一个元素。
        arrayObject.pop()
        返回值 ： arrayObject 的最后一个元素。
      </text>
      <text>push() 方法可向数组的末尾添加一个或多个元素，并返回新的长度。
        arrayObject.push(newelement1,newelement2,....,newelementX)
      </text>
      <text>reverse() 方法用于颠倒数组中元素的顺序。该方法会改变原来的数组，而不会创建新的数组。
        arrayObject.reverse()
      </text>
      <text>shift() 方法用于把数组的第一个元素从其中删除，并返回第一个元素的值。
        arrayObject.shift()
        返回值： 数组的第一个元素
      </text>
      <text>unshift() 方法可向数组的开头添加一个或更多元素，并返回新的长度。
        arrayObject.unshift(newelement1,newelement2,....,newelementX)
      </text>
      <text>slice() 方法可从已有的数组中返回选定的元素。
        返回一个新的数组，包含从 start 到 end （不包括该元素）的 arrayObject 中的元素。
        该方法并不会修改数组，而是返回一个子数组。如果想删除数组中的一段元素，应该使用方法 Array.splice()。
        arrayObject.slice(start,end) //start 必需 ， end 可选 
      </text>
      <text>sort() 方法用于对数组的元素进行排序
        arrayObject.sort(sortby) sortby	可选。规定排序顺序。必须是函数。
        返回值：对数组的引用。请注意，数组在原数组上进行排序，不生成副本。
      </text>
      <text>splice() 方法向/从数组中添加/删除项目，然后返回被删除的项目。
          该方法会改变原始数组。
          arrayObject.splice(index,howmany,item1,.....,itemX)
          
          index	必需。整数，规定添加/删除项目的位置，使用负数可从数组结尾处规定位置。
          howmany	必需。要删除的项目数量。如果设置为 0，则不会删除项目。
          item1, ..., itemX	可选。向数组添加的新项目。
          
          splice() 方法可删除从 index 处开始的零个或多个元素，并且用参数列表中声明的一个或多个值来替换那些被删除的元素。
          如果从 arrayObject 中删除了元素，则返回的是含有被删除的元素的数组。
      </text>
      <text>filter() 方法创建一个新数组, 其包含通过所提供函数实现的测试的所有元素。 
        var newArray = arr.filter(callback(element[, index[, array]])[, thisArg])
        
        callback 用来测试数组的每个元素的函数。返回 true 表示该元素通过测试，保留该元素，false 则不保留。
        element 数组中当前正在处理的元素。
        index可选 正在处理的元素在数组中的索引。
        array可选 调用了 filter 的数组本身。
        thisArg可选 执行 callback 时，用于 this 的值。

        //示例：
        function isBigEnough(element) {
          return element >= 10;
        }
        var filtered = [12, 5, 8, 130, 44].filter(isBigEnough);
        // filtered is [12, 130, 44] 
      </text>

      <text>findIndex()方法返回数组中满足提供的测试函数的第一个元素的索引。否则返回-1。
        
        //示例
        const array1 = [5, 12, 8, 130, 44];
        const isLargeNumber = (element) => element > 13;
        console.log(array1.findIndex(isLargeNumber));
        // output: 3
      </text>

      <text>some() 方法测试数组中是不是至少有1个元素通过了被提供的函数测试。它返回的是一个
        const array = [1, 2, 3, 4, 5];
        // checks whether an element is even
        const even = (element) => element % 2 === 0;
        console.log(array.some(even));
        // expected output: true
      </text>
      <!--  end -->

      <!--  start -->
      <view>
        <text class="v-subtitle">JS数组遍历的几种方式</text>
        <text>content</text>
      </view>
      <!--  end -->


      <!--  start -->
      <view>
        <text class="v-subtitle">title</text>
        <text>第一种:普通for循环
         for( j =0; j 小于 数组长度 ; j++) {}
        </text>
        <text>第二种:优化版for循环
          for( j =0 , len = 数组长度; j 小于 len ; j++) {}
          使用临时变量，将长度缓存起来，避免重复获取数组长度，当数组较大时优化效果才会比较明显
          这种方法基本上是所有循环遍历方法中性能最高的一种
        </text>
        <text>第三种:foreach循环
          arr.forEach(function(e){ .... }）;
          数组自带的foreach循环，使用频率较高，实际上性能比普通for循环弱
        </text>
        <text>第四种:foreach变种
          Array.prototype.forEach.call(arr,function(el){  });
          由于foreach是Array型自带的，对于一些非这种类型的，无法直接使用(如NodeList)，所以才有了这个变种，使用这个变种可以让类似的数组拥有foreach功能。
        </text>

        <text>第五种 forin循环
          for(j in arr) {   }
          效率最低
        </text>
      </view>
      <!--  end -->


      <!--  start -->
      <view>
        <text class="v-subtitle">子串包含</text>
        <text>string1.indexOf(string2) : 返回值为-1 表示string1不包含string2 ，反之包含。</text>
        <text>在 es6中，提供了一个新方法 ： 
          String.prototype.includes(要包含的子串) 
          如果包含 返回true，否则返回false
        </text>
      </view>
      <!--  end -->

      <!--  start -->
      <view>
        <text class="v-subtitle">filter</text>
        <text>content</text>
      </view>
      <!--  end -->




      <!--  start -->
      <view>
        <text class="v-subtitle">title</text>
        <text>content</text>
      </view>
      <!--  end -->


    </view>
  </view>
</view>